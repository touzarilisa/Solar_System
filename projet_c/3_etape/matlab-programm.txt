
%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Nici-Tech\Desktop\jupiter.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/12/16 11:41:38

%% Initialize variables.
filename = 'C:\Users\Nici-Tech\Desktop\jupiter.txt';
delimiter = ' ';

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'EmptyValue', NaN,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
jupiter = table(dataArray{1:end-1}, 'VariableNames', {'VarName1','VarName2'});

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;


%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Nici-Tech\Desktop\mars.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/12/16 11:41:47

%% Initialize variables.
filename = 'C:\Users\Nici-Tech\Desktop\mars.txt';
delimiter = ' ';

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'EmptyValue', NaN,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
mars = table(dataArray{1:end-1}, 'VariableNames', {'VarName1','VarName2'});

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;



%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Nici-Tech\Desktop\mercure.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/12/16 11:41:56

%% Initialize variables.
filename = 'C:\Users\Nici-Tech\Desktop\mercure.txt';
delimiter = ' ';

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'EmptyValue', NaN,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
mercure = table(dataArray{1:end-1}, 'VariableNames', {'VarName1','VarName2'});

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;

%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Nici-Tech\Desktop\neptune.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/12/16 11:42:04

%% Initialize variables.
filename = 'C:\Users\Nici-Tech\Desktop\neptune.txt';
delimiter = ' ';

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'EmptyValue', NaN,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
neptune = table(dataArray{1:end-1}, 'VariableNames', {'VarName1','VarName2'});

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;

%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Nici-Tech\Desktop\saturne.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/12/16 11:42:13

%% Initialize variables.
filename = 'C:\Users\Nici-Tech\Desktop\saturne.txt';
delimiter = ' ';

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'EmptyValue', NaN,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
saturne = table(dataArray{1:end-1}, 'VariableNames', {'VarName1','VarName2'});

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;

%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Nici-Tech\Desktop\terre.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/12/16 11:42:21

%% Initialize variables.
filename = 'C:\Users\Nici-Tech\Desktop\terre.txt';
delimiter = ' ';

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'EmptyValue', NaN,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
terre = table(dataArray{1:end-1}, 'VariableNames', {'VarName1','VarName2'});

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;

%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Nici-Tech\Desktop\uranus.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/12/16 11:42:30

%% Initialize variables.
filename = 'C:\Users\Nici-Tech\Desktop\uranus.txt';
delimiter = ' ';

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'EmptyValue', NaN,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
uranus = table(dataArray{1:end-1}, 'VariableNames', {'VarName1','VarName2'});

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;

%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Nici-Tech\Desktop\venus.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/12/16 11:42:39

%% Initialize variables.
filename = 'C:\Users\Nici-Tech\Desktop\venus.txt';
delimiter = ' ';

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'EmptyValue', NaN,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
venus = table(dataArray{1:end-1}, 'VariableNames', {'VarName1','VarName2'});

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;




x=venus(:,1);
x=table2array(x);
y=venus(:,2);
y=table2array(y);
legend
plot(x,y)

hold on
x1=terre(:,1);
x1=table2array(x1);
y1=terre(:,2);
y1=table2array(y1);

plot(x1,y1)
x2=saturne(:,1);
x2=table2array(x2);
y2=saturne(:,2);
y2=table2array(y2);

plot(x2,y2)
x3=neptune(:,1);
x3=table2array(x3);
y3=neptune(:,2);
y3=table2array(y3);

plot(x3,y3)
x4=mercure(:,1);
x4=table2array(x4);
y4=mercure(:,2);
y4=table2array(y4);

plot(x4,y4)
x5=mars(:,1);
x5=table2array(x5);
y5=mars(:,2);
y5=table2array(y5);

plot(x5,y5)
x6=jupiter(:,1);
x6=table2array(x6);
y6=jupiter(:,2);
y6=table2array(y6);

plot(x6,y6)
x7=uranus(:,1);
x7=table2array(x7);
y7=uranus(:,2);
y7=table2array(y7);

plot(x7,y7)
legend('venus','terre','saturne','neptune','mercure','mars','jupiter','uranus')
hold off